"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildConsoleLogger = buildConsoleLogger;
exports.ConsoleLogger = void 0;

var _contracts = require("./contracts");

class ConsoleLogger {
  constructor(context) {
    this.context = context;
  }

  formatMessage(message, level, context) {
    let msg = '[' + level + ']';

    if (context && context.app) {
      msg += ' ' + context.app + ': ';
    }

    return msg + message;
  }

  log(level, message, context) {
    switch (level) {
      case 0:
        console.debug(this.formatMessage(message, _contracts.LogLevel.Debug, context), context);
        break;

      case 1:
        console.info(this.formatMessage(message, _contracts.LogLevel.Info, context), context);
        break;

      case 2:
        console.warn(this.formatMessage(message, _contracts.LogLevel.Warn, context), context);
        break;

      case 3:
        console.error(this.formatMessage(message, _contracts.LogLevel.Error, context), context);
        break;

      default:
        console.error(this.formatMessage(message, _contracts.LogLevel.Fatal, context), context);
        break;
    }
  }

  debug(message, context) {
    this.log(0, message, Object.assign({}, this.context, context));
  }

  info(message, context) {
    this.log(1, message, Object.assign({}, this.context, context));
  }

  warn(message, context) {
    this.log(2, message, Object.assign({}, this.context, context));
  }

  error(message, context) {
    this.log(3, message, Object.assign({}, this.context, context));
  }

  fatal(message, context) {
    this.log(4, message, Object.assign({}, this.context, context));
  }

}

exports.ConsoleLogger = ConsoleLogger;

function buildConsoleLogger(context) {
  return new ConsoleLogger(context);
}
//# sourceMappingURL=ConsoleLogger.js.map