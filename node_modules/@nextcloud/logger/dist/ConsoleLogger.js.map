{"version":3,"sources":["../lib/ConsoleLogger.ts"],"names":["ConsoleLogger","constructor","context","formatMessage","message","level","msg","app","log","console","debug","LogLevel","Debug","info","Info","warn","Warn","error","Error","Fatal","Object","assign","fatal","buildConsoleLogger"],"mappings":";;;;;;;;AAAA;;AAEO,MAAMA,aAAN,CAAuC;AAI1CC,EAAAA,WAAW,CAACC,OAAD,EAAe;AACtB,SAAKA,OAAL,GAAeA,OAAf;AACH;;AAEOC,EAAAA,aAAa,CAACC,OAAD,EAAkBC,KAAlB,EAAmCH,OAAnC,EAAyD;AAC1E,QAAII,GAAG,GAAG,MAAMD,KAAN,GAAc,GAAxB;;AACA,QAAIH,OAAO,IAAIA,OAAO,CAACK,GAAvB,EAA4B;AACxBD,MAAAA,GAAG,IAAI,MAAMJ,OAAO,CAACK,GAAd,GAAoB,IAA3B;AACH;;AACD,WAAOD,GAAG,GAAGF,OAAb;AACH;;AAEDI,EAAAA,GAAG,CAACH,KAAD,EAAgBD,OAAhB,EAAiCF,OAAjC,EAAkD;AACjD,YAAQG,KAAR;AACI,WAAK,CAAL;AACII,QAAAA,OAAO,CAACC,KAAR,CAAc,KAAKP,aAAL,CAAmBC,OAAnB,EAA4BO,oBAASC,KAArC,EAA4CV,OAA5C,CAAd,EAAoEA,OAApE;AACA;;AACJ,WAAK,CAAL;AACIO,QAAAA,OAAO,CAACI,IAAR,CAAa,KAAKV,aAAL,CAAmBC,OAAnB,EAA4BO,oBAASG,IAArC,EAA2CZ,OAA3C,CAAb,EAAkEA,OAAlE;AACA;;AACJ,WAAK,CAAL;AACIO,QAAAA,OAAO,CAACM,IAAR,CAAa,KAAKZ,aAAL,CAAmBC,OAAnB,EAA4BO,oBAASK,IAArC,EAA2Cd,OAA3C,CAAb,EAAkEA,OAAlE;AACA;;AACJ,WAAK,CAAL;AACIO,QAAAA,OAAO,CAACQ,KAAR,CAAc,KAAKd,aAAL,CAAmBC,OAAnB,EAA4BO,oBAASO,KAArC,EAA4ChB,OAA5C,CAAd,EAAoEA,OAApE;AACA;;AACJ;AACIO,QAAAA,OAAO,CAACQ,KAAR,CAAc,KAAKd,aAAL,CAAmBC,OAAnB,EAA4BO,oBAASQ,KAArC,EAA4CjB,OAA5C,CAAd,EAAoEA,OAApE;AACA;AAfR;AAiBH;;AAEDQ,EAAAA,KAAK,CAACN,OAAD,EAAkBF,OAAlB,EAA0C;AAC3C,SAAKM,GAAL,CAAS,CAAT,EAAYJ,OAAZ,EAAqBgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,OAAvB,EAAgCA,OAAhC,CAArB;AACH;;AAEDW,EAAAA,IAAI,CAACT,OAAD,EAAkBF,OAAlB,EAA0C;AAC1C,SAAKM,GAAL,CAAS,CAAT,EAAYJ,OAAZ,EAAqBgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,OAAvB,EAAgCA,OAAhC,CAArB;AACH;;AAEDa,EAAAA,IAAI,CAACX,OAAD,EAAkBF,OAAlB,EAA0C;AAC1C,SAAKM,GAAL,CAAS,CAAT,EAAYJ,OAAZ,EAAqBgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,OAAvB,EAAgCA,OAAhC,CAArB;AACH;;AAEDe,EAAAA,KAAK,CAACb,OAAD,EAAkBF,OAAlB,EAA0C;AAC3C,SAAKM,GAAL,CAAS,CAAT,EAAYJ,OAAZ,EAAqBgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,OAAvB,EAAgCA,OAAhC,CAArB;AACH;;AAEDoB,EAAAA,KAAK,CAAClB,OAAD,EAAkBF,OAAlB,EAA0C;AAC3C,SAAKM,GAAL,CAAS,CAAT,EAAYJ,OAAZ,EAAqBgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKnB,OAAvB,EAAgCA,OAAhC,CAArB;AACH;;AAtDyC;;;;AA0DvC,SAASqB,kBAAT,CAA4BrB,OAA5B,EAAmD;AACtD,SAAO,IAAIF,aAAJ,CAAkBE,OAAlB,CAAP;AACH","sourcesContent":["import { ILogger, LogLevel } from './contracts'\n\nexport class ConsoleLogger implements ILogger {\n\n    private context: any\n\n    constructor(context: any) {\n        this.context = context\n    }\n\n    private formatMessage(message: string, level: LogLevel, context: any): string {\n        let msg = '[' + level + ']'\n        if (context && context.app) {\n            msg += ' ' + context.app + ': '\n        }\n        return msg + message\n    }\n\n    log(level: number, message: string, context: object) {\n        switch (level) {\n            case 0:\n                console.debug(this.formatMessage(message, LogLevel.Debug, context), context)\n                break\n            case 1:\n                console.info(this.formatMessage(message, LogLevel.Info, context), context)\n                break\n            case 2:\n                console.warn(this.formatMessage(message, LogLevel.Warn, context), context)\n                break\n            case 3:\n                console.error(this.formatMessage(message, LogLevel.Error, context), context)\n                break\n            default:\n                console.error(this.formatMessage(message, LogLevel.Fatal, context), context)\n                break\n        }\n    }\n\n    debug(message: string, context?: object): void {\n        this.log(0, message, Object.assign({}, this.context, context))\n    }\n\n    info(message: string, context?: object): void {\n        this.log(1, message, Object.assign({}, this.context, context))\n    }\n\n    warn(message: string, context?: object): void {\n        this.log(2, message, Object.assign({}, this.context, context))\n    }\n\n    error(message: string, context?: object): void {\n        this.log(3, message, Object.assign({}, this.context, context))\n    }\n\n    fatal(message: string, context?: object): void {\n        this.log(4, message, Object.assign({}, this.context, context))\n    }\n\n}\n\nexport function buildConsoleLogger(context: any): ILogger {\n    return new ConsoleLogger(context)\n}\n"],"file":"ConsoleLogger.js"}